---
- name: Updating apt
  apt:
    update_cache: yes

- name: Getting current version of kubeadm
  shell: "apt-cache policy kubeadm | grep Installed: | awk '{print $2}'"
  register: command_output

- dpkg_selections:
    name: kubeadm
    selection: install
  when: command_output.stdout != kubeadm_version

- name: Installing new version of kubeadm
  apt:
    name: "kubeadm={{ kubeadm_version }}"
    state: present
  when: command_output.stdout != kubeadm_version

- dpkg_selections:
    name: kubeadm
    selection: hold

- name: Draining the master node
  shell: "kubectl drain {{ inventory_hostname_short }} --ignore-daemonsets --force --kubeconfig /etc/kubernetes/admin.conf"
  when: "'masters' in group_names"

- name: Getting admin config from master
  shell: "cat /etc/kubernetes/admin.conf"
  register: K8S_ADMIN_CONFIG
  when: "'masters' in group_names"

- name: Register dummy host with variable
  add_host:
    name: "k8s_config_host"
    K8S_ADMIN_CONFIG: "{{ K8S_ADMIN_CONFIG.stdout }}"
  when: "'masters' in group_names"

- name: Adding config file to slave node
  shell: "echo '{{ hostvars['k8s_config_host']['K8S_ADMIN_CONFIG'] }}' > /etc/kubernetes/admin.conf"
  when: "'slaves' in group_names"

- name: Draining the slave node
  shell: "kubectl drain {{ inventory_hostname_short }} --ignore-daemonsets --force --kubeconfig /etc/kubernetes/admin.conf"
  when: "'slaves' in group_names"

- name: Running apply upgrade on control plan node
  shell: "kubeadm upgrade apply {{ kubeadm_version | regex_replace('-0*','') }} -y"
  when: "'masters' in group_names"

# TODO for other masters
# - name: Upgrading the kubelet configuration on worker node
#   shell: "kubeadm upgrade node"
#   when: "'masters' in group_names and not the first ip"

- name: Upgrading the kubelet configuration on worker node
  shell: "kubeadm upgrade node"
  when: "'slaves' in group_names"

- name: Getting current version of kubelet
  shell: "apt-cache policy kubelet | grep Installed: | awk '{print $2}'"
  register: command_output

- dpkg_selections:
    name: kubelet
    selection: install
  when: command_output.stdout != kubelet_version

- name: Installing new version of kubelet
  apt:
    name: "kubelet={{ kubelet_version }}"
    state: present
  when: command_output.stdout != kubelet_version

- dpkg_selections:
    name: kubelet
    selection: hold

- name: Getting current version of kubectl
  shell: "apt-cache policy kubectl | grep Installed: | awk '{print $2}'"
  register: command_output

- dpkg_selections:
    name: kubectl
    selection: install
  when: command_output.stdout != kubectl_version

- name: Installing new version of kubectl
  apt:
    name: "kubectl={{ kubectl_version }}"
    state: present
  when: command_output.stdout != kubectl_version

- dpkg_selections:
    name: kubectl
    selection: hold

- name: Running daemon-reload
  shell: "systemctl daemon-reload"

- name: Restarting the kubelet
  shell: "systemctl restart kubelet"

- name: Uncordon node
  shell: "kubectl uncordon {{ inventory_hostname_short }} --kubeconfig /etc/kubernetes/admin.conf"
